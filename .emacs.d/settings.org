* Emacs Settings

** Personal 
   
#+BEGIN_SRC
(setq user-full-name "Brandon Stiles"
      user-mail-address "me@brandonstil.es")
#+END_SRC

** Window

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)

(when window-system
  (setq frame-resize-pixelwise t)
  (set-frame-position (selected-frame) 140 42)
  (set-frame-size (selected-frame) 180 50)
  (set-default-font "Hasklig")
  (set-face-attribute 'default nil :height 150)
  (let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
                 (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
                 (36 . ".\\(?:>\\)")
                 (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
                 (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
                 (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
                 (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
                 (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
                 (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
                 (48 . ".\\(?:x[a-zA-Z]\\)")
                 (58 . ".\\(?:::\\|[:=]\\)")
                 (59 . ".\\(?:;;\\|;\\)")
                 (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
                 (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
                 (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
                 (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
                 (91 . ".\\(?:]\\)")
                 (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
                 (94 . ".\\(?:=\\)")
                 (119 . ".\\(?:ww\\)")
                 (123 . ".\\(?:-\\)")
                 (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
                 (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)"))))
    (dolist (char-regexp alist)
      (set-char-table-range composition-function-table (car char-regexp)
                            `([,(cdr char-regexp) 0 font-shape-gstring])))))
#+END_SRC

** Terminal

#+BEGIN_SRC emacs-lisp
(use-package sane-term
 :ensure t
 :config
 (setq term-term-name "xterm-256color"
       sane-term-shell-command "/bin/bash")
 (add-hook 'term-mode-hook (lambda () (setq term-buffer-maximum-size 10000))))
#+END_SRC

** Environment

#+BEGIN_SRC emacs-lisp
(setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin:/Users/brandon/.local/bin:/Users/brandon/.nvm/versions/node/v6.4.0/bin"))

(setq exec-path (append exec-path '("/usr/local/bin"))
      exec-path (append exec-path '("/Users/brandon/.local/bin"))
      exec-path (append exec-path '("/Users/brandon/.nvm/versions/node/v6.4.0/bin")))
#+END_SRC

** Coq
   
#+BEGIN_SRC emacs-lisp
(use-package pg
 :ensure t
 :defer t
 :config 
 (setq coq-prog-name "/usr/local/bin/coqtop")
 (when t (load "~/.emacs.d/lisp/PG/generic/proof-site")))
#+END_SRC

** Org Mode

#+BEGIN_SRC emacs-lisp
(use-package org
 :ensure t
 :config 
 (with-eval-after-load 'org (add-hook 'org-mode-hook #'visual-line-mode))
 (setq org-startup-truncated nil
       org-log-done t
       org-todo-keywords '((sequence "TODO" "|" "DONE" "CANCELLED"))))
(use-package org-bullets
 :ensure t
 :config 
 (setq org-ellipsis "…"
       org-bullets-bullet-list '("•"))
 (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
(use-package org-agenda
 :ensure t
 :config 
 (load-library "find-lisp")
 (setq org-agenda-files (find-lisp-find-files "~/Dropbox (Personal)/.org" "\.org$")
       org-agenda-compact-blocks t
       org-agenda-start-on-weekday 0
       org-agenda-skip-scheduled-if-done t)
 (defun org-mode-header-hook () (dolist (face '(org-level-1
                                                org-level-2
						org-level-3
						org-level-4
						org-level-5))
						(set-face-attribute face nil :weight 'semi-bold :height 1.0)))
						(add-hook 'org-mode-hook 'org-mode-header-hook))
(use-package org-agenda-property
 :ensure t
 :config 
 (setq org-agenda-property-list '("DEADLINE" "SCHEDULED")
       org-agenda-window-setup (quote current-window)
       org-deadline-warning-days 7
       org-agenda-span (quote fortnight)
       org-agenda-skip-scheduled-if-deadline-is-shown t
       org-agenda-skip-deadline-prewarning-if-scheduled (quote pre-scheduled)
       org-agenda-todo-ignore-deadlines (quote all)
       org-agenda-todo-ignore-scheduled (quote all))
       org-agenda-sorting-strategy (quote ((agenda deadline-up priority-down)
                                           (todo priority-down category-keep)
					   (tags priority-down category-keep)
					   (search category-keep))))
(use-package org-journal
 :ensure t
 :config 
 (setq org-journal-dir "~/Dropbox (Personal)/.org/journal/"
       org-journal-file-format "%Y%m%d.org")
       (add-hook 'org-journal-mode-hook 'org-mode))
(use-package org-ac
 :ensure t
 :config 
 (org-ac/config-default))
(use-package org-crypt
 :ensure t
 :config
 (setq org-tags-exclude-from-inheritance (quote ("crypt"))
       org-crypt-key "stilesbr1@gmail.com")
 (org-crypt-use-before-save-magic))
(use-package epa-file
 :ensure t
 :config 
 (epa-file-enable))
#+END_SRC
   
** IDE

#+BEGIN_SRC emacs-lisp
(use-package jsx-mode
 :ensure t
 :defer t
 :config 
 (add-to-list 'auto-mode-alist '("\\.jsx\\'" . jsx-mode))
 (autoload 'jsx-mode "jsx-mode" "JSX mode" t))
(use-package web-beautify
 :defer t
 :ensure t)
(use-package git-gutter-fringe
 :defer t
 :ensure t)
(use-package nginx-mode
 :defer t
 :ensure t)
(use-package nix-mode
 :defer t
 :ensure t)
(use-package dockerfile-mode
 :defer t
 :ensure t)
(use-package docker
 :defer t
 :ensure t)
(use-package yaml-mode
 :defer t
 :ensure t)
(use-package web-mode
 :defer t
 :ensure t)
(use-package shakespeare-mode
 :defer t
 :ensure t)
(use-package solidity-mode
 :defer t
 :ensure t)
(use-package rainbow-mode
 :defer t
 :ensure t)
(use-package markdown-mode
 :ensure t
 :defer t
 :config
 (add-hook 'markdown-mode-hook 'visual-line-mode))
(use-package magit
 :defer t
 :ensure t)
(use-package smart-mode-line
 :ensure t
 :init
 (setq sml/theme 'respectful)
 (setq sml/no-confirm-load-theme t)
 (smart-mode-line-enable))
(use-package scala-mode
 :defer t
 :ensure t)
(use-package intero
 :defer t
 :ensure t
 :init (intero-global-mode 1))
(use-package haskell-mode
 :defer t
 :ensure t)
#+END_SRC
   
** Theme
   
#+BEGIN_SRC emacs-lisp
(defvar current-theme 2)
(cond ((eq current-theme 0) (use-package base15-theme
			     :ensure t
			     :init
			     (load-theme 'base16-tomorrow t)
		             (set-face-background 'fringe "#eeeeee")))
      ((eq current-theme 1) (use-package flatui-theme
	                     :ensure t
			     :init 
		             (global-linum-mode 1)
			     (set-face-background 'linum "#ecf0f1")
			     (set-face-background 'fringe "#ecf0f1")
			     (global-linum-mode 0)))
      ((eq current-theme 2) (use-package gruvbox-theme
                             :ensure t
	                     :config 
			     (global-linum-mode 0)
			     (custom-set-faces '(neo-dir-link-face ((t (:foreground "#FB4934"))))
			                       '(neo-file-link-face ((t (:foreground "#FAF4C1"))))))))
#+END_SRC

** Project Management

#+BEGIN_SRC emacs-lisp
(use-package dashboard
 :ensure t
 :config 
 (setq dashboard-items '((recents  . 5) (bookmarks . 5) (projects . 5)))
 (dashboard-setup-startup-hook))
(use-package projectile
 :ensure t
 :config 
 (setq projectile-indexing-method 'alien
       projectile-completion-system 'helm
       projectile-enable-caching nil)
 (projectile-mode))
(use-package helm-config
 :ensure t
 :config
 (helm-mode 1))
(use-package helm-projectile
 :ensure t
 :config 
 (setq projectile-completion-system 'helm)
 (helm-projectile-on))
(use-package helm-flycheck    
 :ensure t)
(use-package helm-descbinds
 :ensure t
 :config 
 (helm-descbinds-mode))
(use-package helm-ag
 :ensure t)
(use-package neotree
 :ensure t
 :config 
 (setq-default neo-show-hidden-files t)
 (setq neo-theme (if (display-graphic-p) 'nerd)
       projectile-switch-project-action 'neotree-projectile-action
       neo-smart-open t)
 (add-hook 'neotree-mode-hook (lambda () (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
                                         (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-quick-look)
					 (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
					 (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter))))
#+END_SRC

** Utilities
   
#+BEGIN_SRC emacs-lisp
(use-package s
 :ensure t)
(use-package dumb-jump
 :ensure t
 :config 
 (setq dumb-jump-selector 'helm))
(use-package ag
 :ensure t)
(use-package grep+
 :ensure t)
(use-package hungry-delete 
 :ensure t
 :config 
 (global-hungry-delete-mode))
(use-package iedit
 :ensure t)
(use-package undo-tree
 :ensure t)
(use-package goto-chg
 :ensure t)
(use-package auto-complete
 :ensure t
 :config 
 (ac-config-default)
 (global-auto-complete-mode t)
 (add-to-list 'ac-modes 'org-mode 'markdown-mode))
(use-package ack
 :ensure t)

(setq backup-directory-alist `((".*" ., temporary-file-directory))
      auto-save-file-name-transforms `((".*", temporary-file-directory t))
      savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
(savehist-mode 1)

(defun flyspell-add-word ()
  (interactive)
  (let ((current-location (point))
         (word (flyspell-get-word)))
    (when (consp word)    
      (flyspell-do-correct 'save nil (car word) current-location (cadr word) (caddr word) current-location))))

(setq linum-format (quote "%4d "))
(add-hook 'prog-mode-hook 'linum-mode)

(add-hook 'prog-mode-hook 'flyspell-prog-mode)
(add-hook 'org-mode-hook 'flyspell-mode)

(defun copy-from-osx ()
  (shell-command-to-string "pbpaste"))

(defun paste-to-osx (text &optional push)
  (let ((process-connection-type nil))
    (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
      (process-send-string proc text)
      (process-send-eof proc))))

(setq interprogram-cut-function 'paste-to-osx)
(setq interprogram-paste-function 'copy-from-osx)
#+END_SRC

** Evil Mode
  
#+BEGIN_SRC emacs-lisp
(use-package evil
 :ensure t
 :init
 (setq evil-want-C-u-scroll t
       evil-leader/in-all-states t)
 :config
 (evil-mode 1)
 (evil-define-key 'normal term-raw-map "p" 'term-paste)
 (fset 'evil-visual-update-x-selection 'ignore)
 (add-hook 'org-mode-hook (lambda () (define-key evil-normal-state-map (kbd "TAB") 'org-cycle))))

(use-package evil-leader
 :ensure t
 :config
 (global-evil-leader-mode 1)
 (evil-leader/set-leader "<SPC>"))

(use-package evil-org
 :ensure t
 :after org
 :config
 (add-hook 'org-mode-hook 'evil-org-mode)
 (add-hook 'evil-org-mode-hook (lambda () (evil-org-set-key-theme))))

(use-package evil-terminal-cursor-changer
:ensure t
:config 
(evil-terminal-cursor-changer-activate)
(setq evil-default-cursor (quote (t "#750000"))
    evil-visual-state-cursor '("#880000" box)
    evil-normal-state-cursor '("#750000" box)
    evil-insert-state-cursor '("#e2e222" box)))
#+END_SRC

** Key Bindings

#+BEGIN_SRC emacs-lisp
(global-set-key "\C-x\C-m" 'execute-extended-command)

(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
(define-key helm-map (kbd "C-z")  'helm-select-action)

(global-set-key (kbd "M-x") 'helm-M-x)

(global-set-key (kbd "C-c w") 'flyspell-add-word)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c j") 'org-journal-new-entry)
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c i") 'org-insert-link)

(global-set-key (kbd "C-x d") 'dumb-jump-go)
(global-set-key (kbd "C-x n") 'neotree-toggle)
(global-set-key (kbd "C-x b") 'switch-to-buffer)
(global-set-key (kbd "C-x B") 'helm-filtered-bookmarks)
(global-set-key (kbd "C-x R") 'helm-recentf)
(global-set-key (kbd "C-x f") 'helm-find-files)
(global-set-key (kbd "C-x /") 'helm-projectile-ack)
(global-set-key (kbd "C-x p") 'helm-projectile-find-file)
(global-set-key (kbd "C-x t") 'sane-term)
(global-set-key (kbd "C-x T") 'sane-term-create)

(eval-after-load 'js '(define-key js-mode-map (kbd "C-c b") 'web-beautify-js))
(eval-after-load 'json-mode '(define-key json-mode-map (kbd "C-c b") 'web-beautify-js))
(eval-after-load 'sgml-mode '(define-key html-mode-map (kbd "C-c b") 'web-beautify-html))
(eval-after-load 'web-mode '(define-key web-mode-map (kbd "C-c b") 'web-beautify-html))
(eval-after-load 'css-mode '(define-key css-mode-map (kbd "C-c b") 'web-beautify-css))
(eval-after-load 'haskell-mode '(define-key haskell-mode-map (kbd "C-c b") 'haskell-mode-stylish-buffer))
#+END_SRC
